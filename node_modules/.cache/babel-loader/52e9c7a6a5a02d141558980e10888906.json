{"ast":null,"code":"var _jsxFileName = \"/home/aplahr/Development/code/p5/solar-travel-frontend/src/Destinations/DestinationsContainer.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport addDestination from '../actions/AddDestinations';\nimport Destination from '../Components/Destination';\nimport Form from '../Components/Form';\nimport fetchDestinations from '../actions/FetchDestinations';\nimport fetchFilteredDestinations from '../actions/FetchFilteredDestinations';\nimport filterDestinations from '../actions/FilterDestinations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DestinationsContainer extends Component {\n  constructor() {\n    super(); // Sets the intial state to the value that should be assigned to the default selections in the filter sections (this way if the user doesn't change the value, the filter will still work).\n\n    this.state = {\n      temperature: 'hot',\n      distance: 'closest',\n      gravity: 'high'\n    };\n  }\n\n  componentDidMount() {\n    //Refetches the filteredDestinations array when the user navigates to another page, so the full list is visible when visting the homepage next.\n    this.props.fetchFilteredDestinations();\n  }\n\n  componentWillUnmount() {\n    //Refetches the filteredDestinations array when the user navigates to another page, so the full list is visible when visting the homepage next.\n    this.props.fetchFilteredDestinations();\n  }\n\n  handleSubmit(destination) {\n    // Adds the selected destination to the user's itinierary and renders the itinerary page.\n    let newDestination = destination;\n    newDestination.itinerary_id = 2;\n    this.props.addDestination(newDestination);\n    this.props.history.push(\"/itinerary\");\n  }\n\n  handleFilter(eventValue, formType) {\n    // Dynamically changes the container's state values depending on what the user selects on the filter form.\n    this.setState({\n      [formType]: eventValue\n    });\n  }\n\n  handleFilterSubmit(e) {\n    // Uses the controlled state to send the current selections to the action and reducer.\n    e.preventDefault();\n    this.props.filterDestinations(this.state.temperature, this.state.gravity, this.state.distance);\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    this.props.fetchFilteredDestinations();\n  }\n\n  render() {\n    if (this.props.filteredDestinations.length > 0) {\n      // Determines what to render depending on whether the allDestinations array is empty or not.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"homeContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formContainer\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            handleFilter: (eventValue, formType) => this.handleFilter(eventValue, formType),\n            handleFilterSubmit: e => this.handleFilterSubmit(e),\n            handleReset: e => this.handleReset(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"destContainer\",\n          children: this.props.filteredDestinations.map(destination => /*#__PURE__*/_jsxDEV(Destination, {\n            destination: destination,\n            handleSubmit: () => this.handleSubmit(destination)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (this.props.filteredDestinations.length < 1 && this.props.destinations.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formContainer\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            handleFilter: (eventValue, formType) => this.handleFilter(eventValue, formType),\n            handleFilterSubmit: e => this.handleFilterSubmit(e),\n            handleReset: e => this.handleReset(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"We're sorry. We don't have any destinations that match those criteria.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"noResults\",\n          src: \"https://www.cnet.com/a/img/wb2a0OeMJ8t4Vq_pdSsoPxc9A1Y=/940x0/2019/05/22/1b710a6b-5f4d-4987-a046-c23674b221a3/picard-meme-facepalm.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    destinations: state.allDestinations.destinations,\n    allDestinations: state.allDestinations.destinations,\n    filteredDestinations: state.allDestinations.filteredDestinations\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  addDestination,\n  fetchDestinations,\n  filterDestinations,\n  fetchFilteredDestinations\n})(DestinationsContainer));","map":{"version":3,"sources":["/home/aplahr/Development/code/p5/solar-travel-frontend/src/Destinations/DestinationsContainer.js"],"names":["React","Component","withRouter","connect","addDestination","Destination","Form","fetchDestinations","fetchFilteredDestinations","filterDestinations","DestinationsContainer","constructor","state","temperature","distance","gravity","componentDidMount","props","componentWillUnmount","handleSubmit","destination","newDestination","itinerary_id","history","push","handleFilter","eventValue","formType","setState","handleFilterSubmit","e","preventDefault","handleReset","render","filteredDestinations","length","map","destinations","mapStateToProps","allDestinations"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA4B,4BAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,yBAAP,MAAsC,sCAAtC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;;;AAEA,MAAMC,qBAAN,SAAoCT,SAApC,CAA8C;AAE5CU,EAAAA,WAAW,GAAG;AACZ,YADY,CAEZ;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAC,KADD;AAEXC,MAAAA,QAAQ,EAAC,SAFE;AAGXC,MAAAA,OAAO,EAAC;AAHG,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAE;AAAE;AACnB,SAAKC,KAAL,CAAWT,yBAAX;AACD;;AAEDU,EAAAA,oBAAoB,GAAE;AAAE;AACtB,SAAKD,KAAL,CAAWT,yBAAX;AACD;;AAECW,EAAAA,YAAY,CAACC,WAAD,EAAc;AAAE;AAC1B,QAAIC,cAAc,GAAGD,WAArB;AACAC,IAAAA,cAAc,CAACC,YAAf,GAA8B,CAA9B;AACA,SAAKL,KAAL,CAAWb,cAAX,CAA0BiB,cAA1B;AACA,SAAKJ,KAAL,CAAWM,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD;;AAEDC,EAAAA,YAAY,CAACC,UAAD,EAAaC,QAAb,EAAuB;AAAE;AACnC,SAAKC,QAAL,CAAc;AACZ,OAACD,QAAD,GAAYD;AADA,KAAd;AAGD;;AAGDG,EAAAA,kBAAkB,CAACC,CAAD,EAAI;AAAE;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACA,SAAKd,KAAL,CAAWR,kBAAX,CAA8B,KAAKG,KAAL,CAAWC,WAAzC,EAAsD,KAAKD,KAAL,CAAWG,OAAjE,EAA0E,KAAKH,KAAL,CAAWE,QAArF;AACC;;AAEDkB,EAAAA,WAAW,CAACF,CAAD,EAAG;AACZA,IAAAA,CAAC,CAACC,cAAF;AACA,SAAKd,KAAL,CAAWT,yBAAX;AACD;;AAGHyB,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKhB,KAAL,CAAWiB,oBAAX,CAAgCC,MAAhC,GAAyC,CAA7C,EAA+C;AAAE;AAC/C,0BACA;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,YAAY,EAAE,CAACT,UAAD,EAAaC,QAAb,KAA0B,KAAKF,YAAL,CAAkBC,UAAlB,EAA8BC,QAA9B,CAA9C;AAAuF,YAAA,kBAAkB,EAAGG,CAAD,IAAO,KAAKD,kBAAL,CAAwBC,CAAxB,CAAlH;AAA8I,YAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB;AAAlK;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADJ,eAIM;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBACK,KAAKb,KAAL,CAAWiB,oBAAX,CAAgCE,GAAhC,CAAqChB,WAAD,iBACvC,QAAC,WAAD;AAAa,YAAA,WAAW,EAAEA,WAA1B;AAAuC,YAAA,YAAY,EAAE,MAAM,KAAKD,YAAL,CAAkBC,WAAlB;AAA3D;AAAA;AAAA;AAAA;AAAA,kBADG;AADL;AAAA;AAAA;AAAA;AAAA,gBAJN;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAWD;;AACD,QAAI,KAAKH,KAAL,CAAWiB,oBAAX,CAAgCC,MAAhC,GAAyC,CAAzC,IAA8C,KAAKlB,KAAL,CAAWoB,YAAX,CAAwBF,MAAxB,GAAiC,CAAnF,EAAqF;AACnF,0BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,YAAY,EAAE,CAACT,UAAD,EAAaC,QAAb,KAA0B,KAAKF,YAAL,CAAkBC,UAAlB,EAA8BC,QAA9B,CAA9C;AAAuF,YAAA,kBAAkB,EAAGG,CAAD,IAAO,KAAKD,kBAAL,CAAwBC,CAAxB,CAAlH;AAA8I,YAAA,WAAW,EAAGA,CAAD,IAAO,KAAKE,WAAL,CAAiBF,CAAjB;AAAlK;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAK,UAAA,SAAS,EAAE,WAAhB;AAA4B,UAAA,GAAG,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AASD;AACF;;AAtEyC;;AA0E9C,SAASQ,eAAT,CAAyB1B,KAAzB,EAAgC;AAC5B,SAAO;AACLyB,IAAAA,YAAY,EAAEzB,KAAK,CAAC2B,eAAN,CAAsBF,YAD/B;AAELE,IAAAA,eAAe,EAAE3B,KAAK,CAAC2B,eAAN,CAAsBF,YAFlC;AAGLH,IAAAA,oBAAoB,EAAEtB,KAAK,CAAC2B,eAAN,CAAsBL;AAHvC,GAAP;AAKD;;AAEH,eAAehC,UAAU,CAACC,OAAO,CAACmC,eAAD,EAAkB;AAAClC,EAAAA,cAAD;AAAiBG,EAAAA,iBAAjB;AAAoCE,EAAAA,kBAApC;AAAwDD,EAAAA;AAAxD,CAAlB,CAAP,CAA6GE,qBAA7G,CAAD,CAAzB","sourcesContent":["import React, {Component} from 'react'\nimport {withRouter} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport addDestination from  '../actions/AddDestinations'\nimport Destination from '../Components/Destination'\nimport Form from '../Components/Form'\nimport fetchDestinations from '../actions/FetchDestinations'\nimport fetchFilteredDestinations from '../actions/FetchFilteredDestinations'\nimport filterDestinations from '../actions/FilterDestinations'\n\nclass DestinationsContainer extends Component {\n\n  constructor() {\n    super()\n    // Sets the intial state to the value that should be assigned to the default selections in the filter sections (this way if the user doesn't change the value, the filter will still work).\n    this.state = {\n      temperature:'hot',\n      distance:'closest',\n      gravity:'high'\n    }\n  }\n\n  componentDidMount(){ //Refetches the filteredDestinations array when the user navigates to another page, so the full list is visible when visting the homepage next.\n    this.props.fetchFilteredDestinations()\n  }\n\n  componentWillUnmount(){ //Refetches the filteredDestinations array when the user navigates to another page, so the full list is visible when visting the homepage next.\n    this.props.fetchFilteredDestinations()\n  }\n  \n    handleSubmit(destination) { // Adds the selected destination to the user's itinierary and renders the itinerary page.\n      let newDestination = destination;\n      newDestination.itinerary_id = 2;\n      this.props.addDestination(newDestination)\n      this.props.history.push(\"/itinerary\")\n    }\n    \n    handleFilter(eventValue, formType) { // Dynamically changes the container's state values depending on what the user selects on the filter form.\n      this.setState({\n        [formType]: eventValue,\n      })\n    }\n    \n\n    handleFilterSubmit(e) { // Uses the controlled state to send the current selections to the action and reducer.\n      e.preventDefault()\n      this.props.filterDestinations(this.state.temperature, this.state.gravity, this.state.distance)\n      }\n\n      handleReset(e){\n        e.preventDefault()\n        this.props.fetchFilteredDestinations()\n      }\n\n\n    render() {\n      if (this.props.filteredDestinations.length > 0){ // Determines what to render depending on whether the allDestinations array is empty or not.\n        return (\n        <div className=\"homeContainer\">\n            <div className=\"formContainer\">\n              <Form handleFilter={(eventValue, formType) => this.handleFilter(eventValue, formType)} handleFilterSubmit={(e) => this.handleFilterSubmit(e)} handleReset={(e) => this.handleReset(e)}/>\n            </div>\n              <div className=\"destContainer\">\n                  {this.props.filteredDestinations.map((destination) => \n                <Destination destination={destination} handleSubmit={() => this.handleSubmit(destination)}/>)}\n              </div>\n          </div>\n        )\n      }\n      if (this.props.filteredDestinations.length < 1 && this.props.destinations.length > 0){\n        return (\n          <div className=\"alert\">\n            <div className=\"formContainer\">\n              <Form handleFilter={(eventValue, formType) => this.handleFilter(eventValue, formType)} handleFilterSubmit={(e) => this.handleFilterSubmit(e)} handleReset={(e) => this.handleReset(e)}/>\n            </div>\n              <h1>We're sorry. We don't have any destinations that match those criteria.</h1>\n              <img className =\"noResults\" src='https://www.cnet.com/a/img/wb2a0OeMJ8t4Vq_pdSsoPxc9A1Y=/940x0/2019/05/22/1b710a6b-5f4d-4987-a046-c23674b221a3/picard-meme-facepalm.jpg'></img>\n          </div>\n          )\n      }\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n      destinations: state.allDestinations.destinations,\n      allDestinations: state.allDestinations.destinations,\n      filteredDestinations: state.allDestinations.filteredDestinations\n    }\n  }\n\nexport default withRouter(connect(mapStateToProps, {addDestination, fetchDestinations, filterDestinations, fetchFilteredDestinations})(DestinationsContainer))"]},"metadata":{},"sourceType":"module"}
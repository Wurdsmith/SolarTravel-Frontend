{"ast":null,"code":"var _jsxFileName = \"/home/aplahr/Development/code/p5/solar-travel-frontend/src/Destinations/DestinationsContainer.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport addDestination from '../actions/AddDestinations';\nimport Destination from '../Components/Destination';\nimport Form from '../Components/Form';\nimport fetchDestinations from '../actions/FetchDestinations';\nimport filterDestinations from '../actions/FilterDestinations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DestinationsContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      destinations: [],\n      temperature: '',\n      distance: '',\n      gravity: ''\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.destinations.length < 1) this.setState({\n      destinations: this.props.destinations\n    });\n    debugger;\n  }\n\n  handleSubmit(destination) {\n    let newDestination = destination;\n    newDestination.itinerary_id = 2;\n    this.props.addDestination(newDestination);\n    this.props.history.push(\"/itinerary\");\n  }\n\n  handleFilter(eventValue, formType) {\n    this.setState({\n      [formType]: eventValue\n    }, () => {\n      this.fetchFilteredDests(this.state.temperature, this.state.distance, this.state.gravity); //This function was placed within the setState function to call only after the component's state has been updated.\n    });\n  }\n\n  fetchFilteredDests(temperature, distance, gravity) {\n    this.props.filterDestinations(temperature, distance, gravity);\n  }\n\n  render() {\n    if (this.state.destinations.length > 1) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"homeContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formContainer\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            handleFilter: (eventValue, formType) => this.handleFilter(eventValue, formType)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"destContainer\",\n          children: this.props.destinations.map(destination => /*#__PURE__*/_jsxDEV(Destination, {\n            destination: destination,\n            handleSubmit: () => this.handleSubmit(destination)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    destinations: state.allDestinations.destinations\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, {\n  addDestination,\n  fetchDestinations,\n  filterDestinations\n})(DestinationsContainer));","map":{"version":3,"sources":["/home/aplahr/Development/code/p5/solar-travel-frontend/src/Destinations/DestinationsContainer.js"],"names":["React","Component","withRouter","connect","addDestination","Destination","Form","fetchDestinations","filterDestinations","DestinationsContainer","constructor","state","destinations","temperature","distance","gravity","componentDidUpdate","length","setState","props","handleSubmit","destination","newDestination","itinerary_id","history","push","handleFilter","eventValue","formType","fetchFilteredDests","render","map","mapStateToProps","allDestinations"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {withRouter} from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport addDestination from  '../actions/AddDestinations'\nimport Destination from '../Components/Destination'\nimport Form from '../Components/Form'\nimport fetchDestinations from '../actions/FetchDestinations'\nimport filterDestinations from '../actions/FilterDestinations'\n\nclass DestinationsContainer extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      destinations: [],\n      temperature:'',\n      distance:'',\n      gravity:''\n    }\n  }\n\n  componentDidUpdate(){\n    if (this.state.destinations.length < 1)\n    this.setState({destinations: this.props.destinations})\n    debugger\n  }\n\n    handleSubmit(destination) {\n      let newDestination = destination;\n      newDestination.itinerary_id = 2;\n      this.props.addDestination(newDestination)\n      this.props.history.push(\"/itinerary\")\n    }\n    \n    handleFilter(eventValue, formType) {\n      this.setState({\n        [formType]: eventValue,\n      }, () =>{\n      this.fetchFilteredDests(this.state.temperature, this.state.distance, this.state.gravity) //This function was placed within the setState function to call only after the component's state has been updated.\n      })\n    }\n\n    fetchFilteredDests(temperature, distance, gravity){\n      this.props.filterDestinations(temperature, distance, gravity)\n    }\n\n\n\n    render() {\n     if (this.state.destinations.length > 1){\n        return (\n        <div className=\"homeContainer\">\n            <div className=\"formContainer\">\n              <Form handleFilter={(eventValue, formType) => this.handleFilter(eventValue, formType)}/>\n            </div>\n              <div className=\"destContainer\">\n                  {this.props.destinations.map((destination) => \n                <Destination destination={destination} handleSubmit={() => this.handleSubmit(destination)}/>)}\n              </div>\n          </div>\n        )\n                  }\n  }\n}\n\n\nfunction mapStateToProps(state) {\n    return {destinations: state.allDestinations.destinations}\n  }\n\nexport default withRouter(connect(mapStateToProps, {addDestination, fetchDestinations, filterDestinations})(DestinationsContainer))"]},"metadata":{},"sourceType":"module"}